.cell {
    /* We're using a css variable to share the background color among styles*/
    --bg: white;
    background-color: var(--bg);
    border: 0.1rem solid var(--primary-grey2);
    width: max(25px, 4vmin);
    height: max(25px, 4vmin);
    transition: background-color 0.1s;
    position: relative;
}

.selectable {
    cursor: pointer;
}

.selectable:hover {
    border: 0.1rem solid blue;
}

.spawn-or-move-possible, .possible-spell-target {
    animation: half-fade-in 1s infinite alternate-reverse;
}

.possible-spell-target-indicator {
    --border-angle: 0deg;
    width: 100%;
    height: 100%;
    border: 0.2rem solid transparent;
    position: absolute;
    background: linear-gradient(var(--bg), var(--bg)) padding-box,
    conic-gradient(
        from var(--border-angle),
        var(--primary-purple3) 0deg,
        var(--primary-pink1) 90deg,
        var(--primary-purple3) 180deg,
        var(--primary-pink1) 270deg,
        var(--primary-purple3) 360deg
      ) border-box;
    box-sizing: border-box;
    animation: border-angle-rotate 1.8s infinite linear;
}

.hovered {
    border: 0.1rem solid red;
}

.absolute-positioning-centered {
    position: absolute;
    top: 50%;
    left: 50%;
    box-sizing: border-box;

    /* Centering */
    transform: translate(-50%, -50%);
}

.selected-indicator {
    --border-angle: 0deg;
    width: 100%;
    height: 100%;
    border: 0.2rem solid transparent;
    position: absolute;
    background: linear-gradient(var(--bg), var(--bg)) padding-box,
    conic-gradient(
        from var(--border-angle),
        var(--sky-blue1) 0deg,
        blue 90deg,
        var(--sky-blue1) 180deg,
        blue 270deg,
        var(--sky-blue1) 360deg
      ) border-box;
    
    animation: border-angle-rotate 1.8s infinite linear;
    box-sizing: border-box;
    z-index: 1;
}

.attackable-indicator {
    width: 70%;
    height: 70%;
    background-color: transparent;
    animation: fade-in 1s infinite alternate-reverse;
    z-index: 1;
}

.cell-clash-or-spawn-indicator {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: transparent;
    z-index: 1;

    animation: shadow-expansion-fade 0.6s ease-in-out;
}

.cell-explosion {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 50%;
    left: 50%;
    background-color: transparent;
    border-radius: 50%;
    border: 0.1rem solid var(--pure-grey);
    z-index: 1;

    /* Centering */
    transform: translate(-50%, -50%);
    animation: expansion-fade-out 0.4s ease-in-out;
}

.mana-bubble {
    position: relative;
    top: 50%;
    left: 50%;
    width: 75%;
    height: 75%;
    border-radius: 50%;
    z-index: 1;
    background: linear-gradient(
        180deg,
    var(--mana-blue),
    var(--sky-blue1),
    var(--sky-blue2)
    );

    transform: translate(-50%, -50%);
}

.mana-bubble div {
    display: none;
}

.mana-bubble:hover div {
    display: block;
}

.mana-bubble-description {
    --end-opacity: 0.9;
    position: absolute;
    top: 120%;
    left: -100%;
    width: max(5vmin, 120px);
    height: fit-content;
    padding: var(--spacing-small2);
    background-color: var(--deep-blue);
    border-radius: 0.5rem;

    animation: fade-in 0.4s ease-in-out forwards;
}

.mana-bubble-pop {
    width: 100%;
    height: 100%;
    background-color: var(--mana-blue);
    border-radius: 50%;
    opacity: 0.5;
    box-shadow: 0 0 1rem 0 var(--mana-blue);

    animation: pulse-up-fade 0.7s ease-in-out;
}

.land-mine {
    width: 90%;
    height: 90%;
    z-index: 1;
}

.shield {
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    overflow: hidden;
    position: absolute;
    border: 0.16rem solid rgba(255, 255, 255, 0.7);
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    box-sizing: border-box;
}

.shield::before {
    content: "";
    position: absolute;
    top: 0;
    left: -150%;
    width: 200%;
    height: 40%;
    background: linear-gradient(
        90deg,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0.2) 50%,
        rgba(255, 255, 255, 0) 100%
    );
    transform: rotate(45deg);
    animation: reflection 4s infinite linear;
}

/* Reflection Animation */
@keyframes reflection {
    0% {
        transform: translateX(-100%) rotate(45deg);
    }
    50% {
        transform: translateX(300%) rotate(45deg);
    }
    100% {
        transform: translateX(300%) rotate(45deg);
    }
}